import datetime
import random
import sqlite3
import string

import discord
from discord.ext import commands
import json


class AccountsCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        # self.config = self.load_config()
        self.conn = sqlite3.connect('accounts.db')
        self.cursor = self.conn.cursor()

        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS accounts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                category TEXT,
                service TEXT,
                email TEXT,
                password TEXT
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS redeem_codes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                code TEXT,
                category TEXT,
                service TEXT
            )
        ''')
        self.conn.commit()

    def generate_code(self):
        """Generate a six-character random code with uppercase letters and numbers."""
        characters = string.ascii_uppercase + string.digits
        return ''.join(random.choice(characters) for _ in range(6))


    @commands.command()
    @commands.has_permissions(administrator=True)
    async def addacc(self, ctx, category=None, service=None, *, account_info=None):

        if category is None or service is None or account_info is None:
            await ctx.send(
                'Please provide the category, service, and account information. Example: `.addacc premium netflix email:password`')
            return

        email, password = account_info.split(':')

        self.cursor.execute('''
            INSERT INTO accounts (category, service, email, password)
            VALUES (?, ?, ?, ?)
        ''', (category, service, email, password))
        self.conn.commit()
        embed1 = discord.Embed(title="Account added successfully.")

        await ctx.send(embed=embed1)

    @addacc.error
    async def addacc_error(self, ctx, error):
        if isinstance(error, commands.MissingPermissions):
            await ctx.send("You don't have the required permissions to use the this command.")

    @commands.command()
    async def bgen(self, ctx, service=None):
        if service is None:
            await ctx.send('Please provide the service. Example: `.bgen netflix`')
            return

        if not self.has_available_accounts('basic', service):
            await ctx.send(f'No available accounts for {service} in the basic category.')
            return

        code = self.generate_code()

        self.cursor.execute('''
            SELECT id, email, password FROM accounts
            WHERE category = ? AND service = ?
            ORDER BY RANDOM() LIMIT 1
        ''', ('basic', service))
        account_result = self.cursor.fetchone()

        if account_result:
            account_id, email, password = account_result
            self.cursor.execute('''
                INSERT INTO redeem_codes (code, category, service)
                VALUES (?, ?, ?)
            ''', (code, 'basic', service))
            self.conn.commit()
            embed = discord.Embed(title="Account Generated Successfully!", description="Check your Dms for details",
                                  color=discord.Color.green(), timestamp=datetime.datetime.now(datetime.UTC))
            embed.set_footer(text='\u200b', icon_url=ctx.author.display_avatar)
            await ctx.send(embed=embed)
            embed1 = discord.Embed(title="CODE GENERATED", description="Provide the code to the staff by creating a ticket to redeem the service.", color=discord.Colour.green(), timestamp=datetime.datetime.now(datetime.UTC))
            embed1.add_field(name="Code Generated For", value=f"`{service}`", inline=True)
            embed1.add_field(name="Copy This Code", value=f"```{code}```", inline=True)
            embed1.add_field(name="Verification Instructions", value="Please click the link provided below, wait for a few seconds, then open the form and keep your Discord username there.\n **LINK:** [Verification Link](http://bit.ly/ver1y)", inline=False)
            embed1.set_footer(text="Generated By Wynxx")
            await ctx.author.send(embed=embed1)
        else:
            await ctx.send('No accounts available for the specified category and service.')

    @commands.command()
    @commands.has_role(1180825450327572501)
    async def pgen(self, ctx, service=None):
        try:
            if service is None:
                await ctx.send('Please provide the service. Example: `.pgen netflix`')
                return

            if not self.has_available_accounts('premium', service):
                await ctx.send(f'No available accounts for {service} in the premium category.')
                return

            code = self.generate_code()

            self.cursor.execute('''
                SELECT id, email, password FROM accounts
                WHERE category = ? AND service = ?
                ORDER BY RANDOM() LIMIT 1
            ''', ('premium', service))
            account_result = self.cursor.fetchone()

            if account_result:
                account_id, email, password = account_result
                self.cursor.execute('''
                    INSERT INTO redeem_codes (code, category, service)
                    VALUES (?, ?, ?)
                ''', (code, 'premium', service))
                self.conn.commit()

                embed = discord.Embed(title="Account Generated Successfully!", description="Check your Dms for details",
                                      color=discord.Color.green(), timestamp=datetime.datetime.now(datetime.UTC))
                embed.set_footer(text='\u200b', icon_url=ctx.message.author.display_avatar)
                await ctx.send(embed=embed)

                embed1 = discord.Embed(title="CODE GENERATED",
                                       description="Provide the code to the staff by creating a ticket to redeem the service.",
                                       color=discord.Colour.green(), timestamp=datetime.datetime.now(datetime.UTC))
                embed1.add_field(name="Code Generated For", value=f"`{service}`", inline=True)
                embed1.add_field(name="Copy This Code", value=f"```{code}```", inline=True)
                embed1.add_field(name="Verification Instructions",
                                 value="Please click the link provided below, wait for a few seconds, then open the form and keep your Discord username there.\n **LINK:** [Verification Link](http://bit.ly/ver1y)",
                                 inline=False)
                embed1.set_footer(text="Generated By Wynxx")

                # Print statements for debugging
                # print("Before sending DM to author")
                await ctx.author.send(embed=embed1)
                # print("After sending DM to author")
            else:
                await ctx.send('No accounts available for the specified category and service.')

        except Exception as e:
            # Print the exception for debugging
            print(f"Exception: {e}")
            await ctx.send(f"An error occurred: {e}")

    @pgen.error
    async def pgen_error(self, ctx, error):
        if isinstance(error, commands.MissingRole):
            await ctx.send("You don't have the required role to use the this command.")

    @commands.command()
    @commands.has_role(1180825450327572501)
    async def egen(self, ctx, service=None):
        # Check if required arguments are provided
        if service is None:
            await ctx.send('Please provide the service. Example: `.egen netflix`')
            return


        if not self.has_available_accounts('extreme', service):
            await ctx.send(f'No available accounts for {service} in the extreme category.')
            return

        code = self.generate_code()


        self.cursor.execute('''
            SELECT id, email, password FROM accounts
            WHERE category = ? AND service = ?
            ORDER BY RANDOM() LIMIT 1
        ''', ('extreme', service))
        account_result = self.cursor.fetchone()

        if account_result:
            account_id, email, password = account_result

            self.cursor.execute('''
                INSERT INTO redeem_codes (code, category, service)
                VALUES (?, ?, ?)
            ''', (code, 'extreme', service))
            self.conn.commit()
            embed = discord.Embed(title="Account Generated Successfully!", description="Check your Dms for details",
                                  color=discord.Color.green(), timestamp=datetime.datetime.now(datetime.UTC))
            embed.set_footer(text='\u200b', icon_url=ctx.message.author.display_avatar)
            await ctx.send(embed=embed)
            embed1 = discord.Embed(title="CODE GENERATED",
                                   description="Provide the code to the staff by creating a ticket to redeem the service.",
                                   color=discord.Colour.green(), timestamp=datetime.datetime.now(datetime.UTC))
            embed1.add_field(name="Code Generated For", value=f"`{service}`", inline=True)
            embed1.add_field(name="Copy This Code", value=f"```{code}```", inline=True)
            embed1.add_field(name="Verification Instructions",
                             value="Please click the link provided below, wait for a few seconds, then open the form and keep your Discord username there.\n **LINK:** [Verification Link](http://bit.ly/ver1y)",
                             inline=False)
            embed1.set_footer(text="Generated By Wynxx")
            await ctx.author.send(embed=embed1)
        else:
            await ctx.send('No accounts available for the specified category and service.')

    def has_available_accounts(self, category, service):
        self.cursor.execute('''
            SELECT COUNT(*) FROM accounts
            WHERE category = ? AND service = ?
        ''', (category, service))
        count = self.cursor.fetchone()[0]
        return count > 0

    @egen.error
    async def egen_error(self, ctx, error):
        if isinstance(error, commands.MissingRole):
            await ctx.send("You don't have the required role to use the this command.")

    @commands.command()
    @commands.has_permissions(administrator=True)
    async def redeem(self, ctx, code):
        self.cursor.execute('''
            SELECT category, service FROM redeem_codes
            WHERE code = ?
        ''', (code,))
        result = self.cursor.fetchone()

        if result:
            category, service = result

            self.cursor.execute('''
                DELETE FROM redeem_codes
                WHERE code = ?
            ''', (code,))
            self.conn.commit()

            self.cursor.execute('''
                SELECT id, email, password FROM accounts
                WHERE category = ? AND service = ?
                ORDER BY RANDOM() LIMIT 1
            ''', (category, service))
            account_result = self.cursor.fetchone()

            if account_result:
                account_id, email, password = account_result
                await ctx.author.send(
                    f'Successful! Code redeemed for {service} ({category}). Account details:\nEmail: {email}\nPassword: {password}')

                self.cursor.execute('''
                    DELETE FROM accounts
                    WHERE id = ?
                ''', (account_id,))
                self.conn.commit()

            else:
                await ctx.author.send(
                    f'Successful! Code redeemed for {service} ({category}), but no accounts available.')

            await ctx.send('Check your DMs for the redeemed account details!')
        else:
            await ctx.send('Invalid redemption code.')

    @redeem.error
    async def redeem_error(self, ctx, error):
        if isinstance(error, commands.MissingPermissions):
            await ctx.send("You don't have the required permissions to use the this command.")

#STOCK
def get_stock(self, category):
    self.cursor.execute('''
        SELECT service, COUNT(*) FROM accounts
        WHERE category = ?
        GROUP BY service
    ''', (category,))
    result = self.cursor.fetchall()
    print(f"Stock for {category}: {result}")
    return result or []  # Return an empty 


def format_stock(self, stock):
    if not stock:
        return "Empty"

    formatted_stock = ""
    for service, count in stock:
        formatted_stock += f"- {service} ({count})\n"

    return formatted_stock


@commands.command()
async def stock(self, ctx):
    print("Executing .stock command")
    basic_stock = self.get_stock('basic')
    premium_stock = self.get_stock('premium')
    extreme_stock = self.get_stock('extreme')

    print(f"Basic Stock: {basic_stock}")
    print(f"Premium Stock: {premium_stock}")
    print(f"Extreme Stock: {extreme_stock}")

    embeds = discord.Embed(title="Stock Information", color=0x00ff00)

    embeds.add_field(name="Basic", value=self.format_stock(basic_stock), inline=False)
    embeds.add_field(name="Premium", value=self.format_stock(premium_stock), inline=False)
    embeds.add_field(name="Extreme", value=self.format_stock(extreme_stock), inline=False)

    await ctx.send(embed=embeds)


async def setup(bot):
    await bot.add_cog(AccountsCog(bot))
